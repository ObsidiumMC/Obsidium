name: Release

on:
  push:
    tags:
      - "v*"

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Obsidium ${{ github.ref_name }}
          draft: false
          prerelease: false
          body: |
            ## Obsidium Minecraft Server ${{ github.ref_name }}

            A high-performance Minecraft server written in Rust.

            ### Installation

            1. Download the appropriate binary for your platform below
            2. Make it executable (Linux/macOS): `chmod +x Obsidium-*`
            3. Run the server: `./Obsidium-*`

            ### Platform Support
            - **Linux**: `Obsidium-linux-x86_64`
            - **Windows**: `Obsidium-windows-x86_64.exe`
            - **macOS**: `Obsidium-macos-x86_64`

  build-and-upload:
    name: Build and Upload
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: Obsidium
            asset_name: Obsidium-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: Obsidium.exe
            asset_name: Obsidium-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: Obsidium
            asset_name: Obsidium-macos-x86_64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Unix only)
        if: matrix.os != 'windows-latest'
        run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream
